import React from 'react';
import {screen, render} from '@testing-library/react'
import '@testing-library/jest-dom'
import {BrowserRouter} from 'react-router-dom'
import Game from './Game.js'
import {getAllPlanets, getSecondSet} from '../../FetchCalls.js'
import {mockFetch, mockFetch2} from '../../MockData.js'
jest.mock('../../FetchCalls.js')

describe('Game', () => {
it('should render a planet on the page', () => {
  getAllPlanets.mockResolvedValue(mockFetch)
  getSecondSet.mockResolvedValue(mockFetch2)
  const setCurrentPlanet = jest.fn()
  render(<BrowserRouter><Game setCurrentPlanet={setCurrentPlanet} /></BrowserRouter>)
  const planetCard = screen.getByAltText('current planet')
  expect(planetCard).toBeInTheDocument()
})
it('should render a greeting message', () => {
  getAllPlanets.mockResolvedValue(mockFetch)
  getSecondSet.mockResolvedValue(mockFetch2)
  const setCurrentPlanet = jest.fn()
  render(<BrowserRouter><Game setCurrentPlanet={setCurrentPlanet} /></BrowserRouter>)
  const greeting = screen.getByText('Welcome to Star Wars !')
  expect(greeting).toBeInTheDocument()
  })
  it('should render a selector for the star wars movies', () => {
    getAllPlanets.mockResolvedValue(mockFetch)
    getSecondSet.mockResolvedValue(mockFetch2)
    const setCurrentPlanet = jest.fn()
    render(<BrowserRouter><Game setCurrentPlanet={setCurrentPlanet} /></BrowserRouter>)
    const jarjar = screen.getByAltText('episode 1')
    const attackOfClones = screen.getByAltText('episode 2')
    const revengeOfSith = screen.getByAltText('episode 3')
    const newHope = screen.getByAltText("episode 4")
    const empireStrikes = screen.getByAltText("episode 5")
    const returnOfTheJedi = screen.getByAltText("episode 6")
    expect(jarjar).toBeInTheDocument()
    expect(attackOfClones).toBeInTheDocument()
    expect(revengeOfSith).toBeInTheDocument()
    expect(newHope).toBeInTheDocument()
    expect(empireStrikes).toBeInTheDocument()
    expect(returnOfTheJedi).toBeInTheDocument()
  })
  it('should have a button that allows the user to inquire on the rules of the game', () => {
    getAllPlanets.mockResolvedValue(mockFetch)
    getSecondSet.mockResolvedValue(mockFetch2)
    const setCurrentPlanet = jest.fn()
    render(<BrowserRouter><Game setCurrentPlanet={setCurrentPlanet} /></BrowserRouter>)
    const instructions = screen.getByText('?')
    expect(instructions).toBeInTheDocument()
  })
  it('should have a navigation button that allows access to the high scores page', () => {
    getAllPlanets.mockResolvedValue(mockFetch)
    getSecondSet.mockResolvedValue(mockFetch2)
    const setCurrentPlanet = jest.fn()
    render(<BrowserRouter><Game setCurrentPlanet={setCurrentPlanet} /></BrowserRouter>)
    const navButton = screen.getByText('High Scores')
    expect(navButton).toBeInTheDocument()
  })
  it('should present the score and round of the player', () => {
    getAllPlanets.mockResolvedValue(mockFetch)
    getSecondSet.mockResolvedValue(mockFetch2)
    const setCurrentPlanet = jest.fn()
    render(<BrowserRouter><Game setCurrentPlanet={setCurrentPlanet} /></BrowserRouter>)
    const score = screen.getByText('Score:')
    expect(score).toBeInTheDocument()
    const round = screen.getByText('Round:', {exact:false})
    expect(round).toBeInTheDocument()
  })
  it('should have a submit and a clear selection button', () => {
    getAllPlanets.mockResolvedValue(mockFetch)
    getSecondSet.mockResolvedValue(mockFetch2)
    const setCurrentPlanet = jest.fn()
    render(<BrowserRouter><Game setCurrentPlanet={setCurrentPlanet} /></BrowserRouter>)
    let submitbtn = screen.getByText('Submit!')
    expect(submitbtn).toBeInTheDocument()
    let clearbtn = screen.getByText('Clear Selection')
    expect(clearbtn).toBeInTheDocument()
  })
  it('should get the planetary info of any given planet', () => {
    getAllPlanets.mockResolvedValue(mockFetch)
    getSecondSet.mockResolvedValue(mockFetch2)
    const setCurrentPlanet = jest.fn()
    render(<BrowserRouter><Game setCurrentPlanet={setCurrentPlanet} /></BrowserRouter>)
    const climate = screen.getByText('Climate:')
    const gravity = screen.getByText('Gravity:')
    const population = screen.getByText('Population:')
    const surface = screen.getByText('Surface Water:')
    expect(surface).toBeInTheDocument()
    expect(population).toBeInTheDocument()
    expect(gravity).toBeInTheDocument()
    expect(climate).toBeInTheDocument()
  })
  it('should give the info of the Current Planet', () => {
    getAllPlanets.mockResolvedValue(mockFetch)
    getSecondSet.mockResolvedValue(mockFetch2)
   const setCurrentPlanet = jest.fn()
    render(<BrowserRouter><Game setCurrentPlanet={setCurrentPlanet} /></BrowserRouter>)
    const currentPlanet = screen.getByAltText('current planet')
    expect(currentPlanet).toBeInTheDocument()
  })
})